ðŸ“˜ Argument Passing in Python â€“ Notes
ðŸ”¹ 1. Types of Function Arguments
 | Type                     | Syntax Example       | Description                                            |
| ------------------------ | -------------------- | ------------------------------------------------------ |
| **Positional**           | `func(10, 20)`       | Values assigned based on **position/order**            |
| **Keyword**              | `func(a=10, b=20)`   | Values assigned using **parameter names**              |
| **Default**              | `def func(a, b=10)`  | Assigns default value if not passed                    |
| **Arbitrary Positional** | `def func(*args)`    | Accepts **any number** of positional arguments (tuple) |
| **Arbitrary Keyword**    | `def func(**kwargs)` | Accepts **any number** of keyword arguments (dict)     |


ðŸ”¹ 2. Positional Arguments
def greet(name, age):
    print(f"Hello {name}, age {age}")

greet("Alice", 22)

ðŸ”¹ 3. Keyword Arguments
greet(age=22, name="Alice")

ðŸ”¹ 4. Default Arguments
def greet(name, age=18):
    print(f"Hello {name}, age {age}")

greet("Bob")         # Uses default age = 18

ðŸ”¹ 5. Arbitrary Positional (*args)
def add(*args):
    print(sum(args))

add(1, 2, 3, 4)  # args = (1, 2, 3, 4)

ðŸ”¹ 6. Arbitrary Keyword (**kwargs)
def details(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

details(name="Sid", age=22)



ðŸ”¹ 7. Mixing All Types
def demo(a, b=2, *args, **kwargs):
    print(a, b, args, kwargs)

demo(1, 3, 4, 5, x=10, y=20)

ðŸ”¹ 8. Call by Object Reference
Python uses:

Call-by-value for immutable types (int, str, tuple)

Call-by-reference for mutable types (list, dict)

def change(x):
    x.append(100)

a = [1, 2]
change(a)
print(a)   # [1, 2, 100]

